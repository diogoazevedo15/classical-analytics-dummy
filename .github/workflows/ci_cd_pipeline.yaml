name: "CI/CD Pipeline"

on:
  pull_request:
    branches: [dev, main]
    types: [opened, reopened, synchronize]
  push:
    branches: [dev, main]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  # 1) Lint
  lint_job:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install Linter
        run: pip install flake8

      - name: Run Lint
        run: flake8 src/

  # 2) Tests
  tests_job:
    name: Run Tests
    runs-on: ubuntu-latest
    # This ensures tests only start if lint_job completed (and succeeded).
    needs: [lint_job]
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install test dependencies
        run: pip install pytest

      - name: Run Tests
        run: pytest tests/

  # 3) Bump Version
  bump_version_job:
    name: Bump Version
    runs-on: ubuntu-latest
    # Only runs after tests pass.
    needs: [tests_job]
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # So we can push tags or commits if needed

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install Dependencies
        run: pip install pyyaml

      - name: Bump Version
        run: |
          python .github/scripts/bump_versions.py
        env:
          PR_NUMBER: ${{ github.event.pull_request.number || 'none' }}
          PR_LABELS: ${{ toJson(github.event.pull_request.labels || []) }}
          PR_TITLE: ${{ github.event.pull_request.title || 'no-title' }}
          BASE_REF: ${{ github.ref }}

      - name: Commit Changes
        if: ${{ success() }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "chore: Bump version (Auto)"
            git push origin ${{ github.ref }}

  # 4) Deploy
  deploy_job:
    name: Deploy Pipeline
    runs-on: ubuntu-latest
    # Only runs after version bump is successful.
    needs: [bump_version_job]
    env:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_RESOURCE_GROUP: ${{ vars.AZURE_RESOURCE_GROUP_DEV }}
      AZURE_WORKSPACE_NAME: ${{ vars.AZURE_WORKSPACE_NAME_DEV }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Install Azure CLI
        run: curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      - name: Azure Login
        run: |
          az login --service-principal \
            --username $AZURE_CLIENT_ID \
            --password $AZURE_CLIENT_SECRET \
            --tenant $AZURE_TENANT_ID

      - name: Install Azure ML CLI
        run: az extension add -n ml --yes

      - name: Configure defaults
        run: |
          az configure --defaults \
            group=$AZURE_RESOURCE_GROUP \
            workspace=$AZURE_WORKSPACE_NAME \
            subscription=$AZURE_SUBSCRIPTION_ID

      - name: Deploy Environments and Components
        run: |
          for dir in src/train/components/*/; do
            echo "Processing $dir"
            if [ -f "$dir/env.yaml" ]; then
              echo "Deploying environment in $dir"
              az ml environment create --file "$dir/env.yaml"
            else
              echo "No env.yaml found in $dir"
            fi
            if [ -f "$dir/config.yaml" ]; then
              echo "Deploying component in $dir"
              az ml component create --file "$dir/config.yaml"
            else
              echo "No config.yaml found in $dir"
            fi
          done

      - name: Create or Update Pipeline
        run: az ml component create --file src/train/pipeline.yaml

  # 5) Tag & Merge
  tag_and_merge_job:
    name: Tag and Merge PR
    runs-on: ubuntu-latest
    # Only runs after deploy_job is successful.
    needs: [deploy_job]
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install Dependencies
        run: pip install yq

      - name: Extract PR Info
        run: |
          echo "PR_NUMBER=${{ github.event.pull_request.number || '' }}" >> $GITHUB_ENV
          echo "PR_HEAD_SHA=${{ github.event.pull_request.head.sha || '' }}" >> $GITHUB_ENV

      - name: Create & Push Tag
        run: |
          VERSION=$(yq e '.version' version.yaml)
          echo "Found version: $VERSION"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # If there's no PR_HEAD_SHA, this might be a direct push rather than a PR
          if [ -n "${PR_HEAD_SHA}" ]; then
            git tag "v$VERSION" "$PR_HEAD_SHA"
            git push origin "v$VERSION"
          else
            echo "No PR HEAD SHA found, skipping tag creation."
          fi

      - name: Merge Pull Request
        # This step merges the PR if it exists
        run: |
          if [ -n "${PR_NUMBER}" ]; then
            echo "Merging PR #${PR_NUMBER}..."
            gh pr merge ${PR_NUMBER} --repo "${{ github.repository }}" --merge --auto
          else
            echo "No PR_NUMBER found, skipping merge."
