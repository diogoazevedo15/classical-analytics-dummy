name: "Push to Azure Dev"

on:
  workflow_call:
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_CLIENT_SECRET:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true

permissions:
  contents: write
  pull-requests: write

jobs:
  push_to_azure:
    name: "Push to Azure"
    runs-on: ubuntu-latest
    env:
      # Azure Service Principal credentials and defaults
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      # Default resource group and workspace (can be overridden in calling workflow or repo settings)
      AZURE_RESOURCE_GROUP: ${{ vars.AZURE_RESOURCE_GROUP_DEV }}
      AZURE_WORKSPACE_NAME: ${{ vars.AZURE_WORKSPACE_NAME_DEV }}

    steps:
      - name: "[INFO] Checkout repository"
        uses: actions/checkout@v3

      - name: "[INFO] Install Azure CLI"
        shell: bash
        run: |
          set -euo pipefail
          echo "=== Installing Azure CLI ==="
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      - name: "[INFO] Login to Azure using Service Principal"
        shell: bash
        run: |
          set -euo pipefail
          echo "=== Logging in to Azure ==="
          az login --service-principal \
            --username "$AZURE_CLIENT_ID" \
            --password "$AZURE_CLIENT_SECRET" \
            --tenant "$AZURE_TENANT_ID"

      - name: "[INFO] Install Azure ML CLI Extension"
        shell: bash
        run: |
          set -euo pipefail
          echo "=== Installing the Azure ML extension ==="
          az extension add -n ml --yes

      - name: "[INFO] Configure Azure defaults"
        shell: bash
        run: |
          set -euo pipefail
          echo "=== Configuring default subscription, resource group, and workspace ==="
          az configure --defaults group="$AZURE_RESOURCE_GROUP" workspace="$AZURE_WORKSPACE_NAME" subscription="$AZURE_SUBSCRIPTION_ID"

      # ==================================================
      # TRAINING COMPONENTS & PIPELINES DEPLOYMENT
      # ==================================================
      - name: "[TRAIN] Deploy Environments & Components"
        shell: bash
        run: |
          set -euo pipefail
          echo "=== [TRAIN] Scanning for environment and component YAML files in 'src/train/components/' ==="
          for component_dir in src/train/components/*/; do
            if [ ! -d "$component_dir" ]; then
              continue
            fi
            component_name=$(basename "$component_dir")
            echo "--------------------------------------------------"
            echo "[TRAIN][INFO] Processing component: ${component_name} in ${component_dir}"
            echo "--------------------------------------------------"

            # Deploy environment if env.yaml is found
            if [ -f "$component_dir/env.yaml" ]; then
              echo "[TRAIN][${component_name}] Found 'env.yaml' -> Deploying environment..."
              az ml environment create --file "$component_dir/env.yaml"
              echo "[TRAIN][${component_name}] Environment deployment completed."
            else
              echo "[TRAIN][${component_name}] No 'env.yaml' found, skipping environment deployment."
            fi

            # Deploy component if config.yaml is found
            if [ -f "$component_dir/config.yaml" ]; then
              echo "[TRAIN][${component_name}] Found 'config.yaml' -> Deploying component..."
              az ml component create --file "$component_dir/config.yaml"
              echo "[TRAIN][${component_name}] Component deployment completed."
            else
              echo "[TRAIN][${component_name}] No 'config.yaml' found, skipping component deployment."
            fi

            echo ""
          done

      - name: "[TRAIN] Create or Update Pipeline"
        if: ${{ always() }}  # Evaluate even if prior steps in this job succeed, but any failure above will abort the job.
        shell: bash
        run: |
          set -euo pipefail
          if [ -f "src/train/pipeline.yaml" ]; then
            echo "=== [TRAIN] Deploying pipeline from 'src/train/pipeline.yaml' ==="
            az ml component create --file src/train/pipeline.yaml
          else
            echo "=== [TRAIN] No 'pipeline.yaml' found in 'src/train/' ==="
          fi

      # ==================================================
      # INFERENCE COMPONENTS & PIPELINES DEPLOYMENT
      # ==================================================
      - name: "[INFERENCE] Deploy Environments & Components"
        shell: bash
        run: |
          set -euo pipefail
          echo "=== [INFERENCE] Scanning for environment and component YAML files in 'src/inference/components/' ==="
          for component_dir in src/inference/components/*/; do
            if [ ! -d "$component_dir" ]; then
              continue
            fi
            component_name=$(basename "$component_dir")
            echo "--------------------------------------------------"
            echo "[INFERENCE][INFO] Processing component: ${component_name} in ${component_dir}"
            echo "--------------------------------------------------"

            # Deploy environment if env.yaml is found
            if [ -f "$component_dir/env.yaml" ]; then
              echo "[INFERENCE][${component_name}] Found 'env.yaml' -> Deploying environment..."
              az ml environment create --file "$component_dir/env.yaml"
              echo "[INFERENCE][${component_name}] Environment deployment completed."
            else
              echo "[INFERENCE][${component_name}] No 'env.yaml' found, skipping environment deployment."
            fi

            # Deploy component if config.yaml is found
            if [ -f "$component_dir/config.yaml" ]; then
              echo "[INFERENCE][${component_name}] Found 'config.yaml' -> Deploying component..."
              az ml component create --file "$component_dir/config.yaml"
              echo "[INFERENCE][${component_name}] Component deployment completed."
            else
              echo "[INFERENCE][${component_name}] No 'config.yaml' found, skipping component deployment."
            fi

            echo ""
          done

      - name: "[INFERENCE] Create or Update Pipeline"
        shell: bash
        run: |
          set -euo pipefail
          if [ -f "src/inference/pipeline.yaml" ]; then
            echo "=== [INFERENCE] Deploying pipeline from 'src/inference/pipeline.yaml' ==="
            az ml component create --file src/inference/pipeline.yaml
          else
            echo "=== [INFERENCE] No 'pipeline.yaml' found in 'src/inference/' ==="
          fi
