name: "Push to Azure Dev"

on:
  workflow_call:
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_CLIENT_SECRET:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true

permissions:
  contents: write
  pull-requests: write

jobs:
  push_to_azure:
    name: "Push to Azure"
    runs-on: ubuntu-latest
    env:
      # Azure Service Principal credentials
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Default resource group and workspace
      # (Can be overridden in the calling workflow or repo settings)
      AZURE_RESOURCE_GROUP: ${{ vars.AZURE_RESOURCE_GROUP_DEV }}
      AZURE_WORKSPACE_NAME: ${{ vars.AZURE_WORKSPACE_NAME_DEV }}

    steps:
      - name: "[INFO] Checkout repository"
        uses: actions/checkout@v3

      - name: "[INFO] Install Azure CLI"
        shell: bash
        run: |
          set -euo pipefail
          echo "=== Installing Azure CLI ==="
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      - name: "[INFO] Login to Azure using Service Principal"
        shell: bash
        run: |
          set -euo pipefail
          echo "=== Logging in to Azure ==="
          az login --service-principal \
            --username "$AZURE_CLIENT_ID" \
            --password "$AZURE_CLIENT_SECRET" \
            --tenant "$AZURE_TENANT_ID"

      - name: "[INFO] Install Azure ML CLI Extension"
        shell: bash
        run: |
          set -euo pipefail
          echo "=== Installing the Azure ML CLI extension ==="
          az extension add --name ml --yes

      - name: "[INFO] Configure Azure defaults"
        shell: bash
        run: |
          set -euo pipefail
          echo "=== Setting default subscription, resource group, and workspace ==="
          az configure --defaults group="$AZURE_RESOURCE_GROUP" workspace="$AZURE_WORKSPACE_NAME" subscription="$AZURE_SUBSCRIPTION_ID"

      # ==================================================
      # TRAINING COMPONENTS & PIPELINES DEPLOYMENT
      # ==================================================
      - name: "[TRAIN] Deploy Environments & Components"
        shell: bash
        run: |
          set -euo pipefail
          echo ""
          echo "#################################################################"
          echo "### [TRAIN] Deploying Environments & Components               ###"
          echo "#################################################################"
          echo ""

          for component_dir in src/train/components/*/; do
            # Skip if not a directory
            if [ ! -d "$component_dir" ]; then
              continue
            fi

            component_name=$(basename "$component_dir")

            echo "--------------------------------------------------"
            echo "[TRAIN] Currently in directory: $component_dir"
            echo "[TRAIN] Component name: $component_name"
            echo "--------------------------------------------------"

            # Deploy environment if found
            if [ -f "$component_dir/env.yaml" ]; then
              echo "[TRAIN] Deploying environment from: $component_dir/env.yaml"
              az ml environment create --file "$component_dir/env.yaml"
              echo "[TRAIN] Environment deployment completed."
            else
              echo "[TRAIN] No env.yaml found in $component_dir. Skipping environment."
            fi

            # Deploy component if found
            if [ -f "$component_dir/config.yaml" ]; then
              echo "[TRAIN] Deploying component from: $component_dir/config.yaml"
              az ml component create --file "$component_dir/config.yaml"
              echo "[TRAIN] Component deployment completed."
            else
              echo "[TRAIN] No config.yaml found in $component_dir. Skipping component."
            fi

            echo ""
          done

      - name: "[TRAIN] Create or Update Pipeline"
        if: ${{ always() }}  # Will still require success in prior steps to continue
        shell: bash
        run: |
          set -euo pipefail
          TRAIN_PIPELINE="src/train/pipeline.yaml"
          echo ""
          echo "#################################################################"
          echo "### [TRAIN] Checking for pipeline file                        ###"
          echo "#################################################################"
          echo ""

          if [ -f "$TRAIN_PIPELINE" ]; then
            echo "[TRAIN] Found pipeline file: $TRAIN_PIPELINE"
            echo "[TRAIN] Deploying pipeline..."
            az ml component create --file "$TRAIN_PIPELINE"
            echo "[TRAIN] Pipeline deployment completed."
          else
            echo "[TRAIN] No pipeline.yaml found in 'src/train/' - Skipping."
          fi

      # ==================================================
      # INFERENCE COMPONENTS & PIPELINES DEPLOYMENT
      # ==================================================
      - name: "[INFERENCE] Deploy Environments & Components"
        shell: bash
        run: |
          set -euo pipefail
          echo ""
          echo "#################################################################"
          echo "### [INFERENCE] Deploying Environments & Components           ###"
          echo "#################################################################"
          echo ""

          for component_dir in src/inference/components/*/; do
            # Skip if not a directory
            if [ ! -d "$component_dir" ]; then
              continue
            fi

            component_name=$(basename "$component_dir")

            echo "--------------------------------------------------"
            echo "[INFERENCE] Currently in directory: $component_dir"
            echo "[INFERENCE] Component name: $component_name"
            echo "--------------------------------------------------"

            # Deploy environment if found
            if [ -f "$component_dir/env.yaml" ]; then
              echo "[INFERENCE] Deploying environment from: $component_dir/env.yaml"
              az ml environment create --file "$component_dir/env.yaml"
              echo "[INFERENCE] Environment deployment completed."
            else
              echo "[INFERENCE] No env.yaml found in $component_dir. Skipping environment."
            fi

            # Deploy component if found
            if [ -f "$component_dir/config.yaml" ]; then
              echo "[INFERENCE] Deploying component from: $component_dir/config.yaml"
              az ml component create --file "$component_dir/config.yaml"
              echo "[INFERENCE] Component deployment completed."
            else
              echo "[INFERENCE] No config.yaml found in $component_dir. Skipping component."
            fi

            echo ""
          done

      - name: "[INFERENCE] Create or Update Pipeline"
        shell: bash
        run: |
          set -euo pipefail
          INFERENCE_PIPELINE="src/inference/pipeline.yaml"
          echo ""
          echo "#################################################################"
          echo "### [INFERENCE] Checking for pipeline file                    ###"
          echo "#################################################################"
          echo ""

          if [ -f "$INFERENCE_PIPELINE" ]; then
            echo "[INFERENCE] Found pipeline file: $INFERENCE_PIPELINE"
            echo "[INFERENCE] Deploying pipeline..."
            az ml component create --file "$INFERENCE_PIPELINE"
            echo "[INFERENCE] Pipeline deployment completed."
          else
            echo "[INFERENCE] No pipeline.yaml found in 'src/inference/' - Skipping."
          fi
