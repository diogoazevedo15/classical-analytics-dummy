name: "Push to Azure Dev"

on:
  workflow_call:
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_CLIENT_SECRET:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true

permissions:
  contents: write
  pull-requests: write

jobs:
  push_to_azure:
    runs-on: ubuntu-latest
    env:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      # These can be set to default environment variables.
      # You can override them as needed in your calling workflow or repository settings (e.g., for Dev/Prod).
      AZURE_RESOURCE_GROUP: ${{ vars.AZURE_RESOURCE_GROUP_DEV }}
      AZURE_WORKSPACE_NAME: ${{ vars.AZURE_WORKSPACE_NAME_DEV }}

    steps:
      - name: "[INFO] Checkout repository"
        uses: actions/checkout@v3

      - name: "[INFO] Install Azure CLI"
        run: |
          echo "=== Installing Azure CLI ==="
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      - name: "[INFO] Login to Azure via Service Principal"
        run: |
          echo "=== Logging into Azure ==="
          az login --service-principal \
            --username $AZURE_CLIENT_ID \
            --password $AZURE_CLIENT_SECRET \
            --tenant $AZURE_TENANT_ID

      - name: "[INFO] Install Azure ML CLI extension"
        run: |
          echo "=== Installing Azure ML extension ==="
          az extension add -n ml --yes

      - name: "[INFO] Configure Azure defaults"
        run: |
          echo "=== Setting default subscription, resource group, and workspace ==="
          az configure --defaults group=$AZURE_RESOURCE_GROUP workspace=$AZURE_WORKSPACE_NAME subscription=$AZURE_SUBSCRIPTION_ID

      # --------------------------------------------------
      # TRAIN: Deploy environments & components
      # --------------------------------------------------
      - name: "[TRAIN] Deploy environments and components"
        run: |
          echo "=== [TRAIN] Searching for environment and component YAMLs in src/train/components/ ==="
          for component_dir in src/train/components/*/; do
            if [ ! -d "$component_dir" ]; then
              continue
            fi
            component_name=$(basename "$component_dir")

            echo "--------------------------------------------------"
            echo "[INFO] Processing component directory: $component_dir"
            echo "--------------------------------------------------"

            # Deploy environment if env.yaml exists
            if [ -f "$component_dir/env.yaml" ]; then
              echo "[${component_name}] Found env.yaml -> Deploying environment..."
              az ml environment create --file "$component_dir/env.yaml"
              echo "[${component_name}] Environment deployment completed."
            else
              echo "[${component_name}] No env.yaml found -> Skipping environment deployment."
            fi

            # Deploy component if config.yaml exists
            if [ -f "$component_dir/config.yaml" ]; then
              echo "[${component_name}] Found config.yaml -> Deploying component..."
              az ml component create --file "$component_dir/config.yaml"
              echo "[${component_name}] Component deployment completed."
            else
              echo "[${component_name}] No config.yaml found -> Skipping component deployment."
            fi

            echo ""
          done

      # --------------------------------------------------
      # TRAIN: Create or update pipeline
      # --------------------------------------------------
      - name: "[TRAIN] Create/Update pipeline (if pipeline.yaml exists)"
        if: ${{ always() }}  # Always run this step if the train folder might contain a pipeline
        run: |
          if [ -f "src/train/pipeline.yaml" ]; then
            echo "=== [TRAIN] Deploying pipeline from src/train/pipeline.yaml ==="
            az ml component create --file src/train/pipeline.yaml
          else
            echo "=== [TRAIN] No pipeline.yaml found in src/train/ ==="
          fi

      # --------------------------------------------------
      # INFERENCE: Deploy environments & components
      # --------------------------------------------------
      - name: "[INFERENCE] Deploy environments and components"
        run: |
          echo "=== [INFERENCE] Searching for environment and component YAMLs in src/inference/components/ ==="
          for component_dir in src/inference/components/*/; do
            if [ ! -d "$component_dir" ]; then
              continue
            fi
            component_name=$(basename "$component_dir")

            echo "--------------------------------------------------"
            echo "[INFO] Processing component directory: $component_dir"
            echo "--------------------------------------------------"

            # Deploy environment if env.yaml exists
            if [ -f "$component_dir/env.yaml" ]; then
              echo "[${component_name}] Found env.yaml -> Deploying environment..."
              az ml environment create --file "$component_dir/env.yaml"
              echo "[${component_name}] Environment deployment completed."
            else
              echo "[${component_name}] No env.yaml found -> Skipping environment deployment."
            fi

            # Deploy component if config.yaml exists
            if [ -f "$component_dir/config.yaml" ]; then
              echo "[${component_name}] Found config.yaml -> Deploying component..."
              az ml component create --file "$component_dir/config.yaml"
              echo "[${component_name}] Component deployment completed."
            else
              echo "[${component_name}] No config.yaml found -> Skipping component deployment."
            fi

            echo ""
          done

      # --------------------------------------------------
      # INFERENCE: Create or update pipeline
      # --------------------------------------------------
      - name: "[INFERENCE] Create/Update pipeline (if pipeline.yaml exists)"
        run: |
          if [ -f "src/inference/pipeline.yaml" ]; then
            echo "=== [INFERENCE] Deploying pipeline from src/inference/pipeline.yaml ==="
            az ml component create --file src/inference/pipeline.yaml
          else
            echo "=== [INFERENCE] No pipeline.yaml found in src/inference/ ==="
          fi
