name: "MLOps Pipeline"

on:
  pull_request_review:
    types: [submitted]

permissions:
  contents: write
  pull-requests: write
  checks: read

jobs:
  on_approve:
    name: "On Approve"
    uses: ./.github/workflows/on_approve.yaml
    with:
      pull_request_number: ${{ github.event.pull_request.number }}

  bump_version:
    name: "Bump Version"
    needs: on_approve
    uses: ./.github/workflows/bump_version.yaml
    with:
      pull_request_number: ${{ github.event.pull_request.number }}
      pr_labels: ${{ toJson(github.event.pull_request.labels) }}
      pr_title: ${{ github.event.pull_request.title }}
      base_ref: ${{ github.event.pull_request.base.ref }}
      head_ref: ${{ github.event.pull_request.head.ref }}

  push_to_azure:
    name: "Push to Azure"
    needs: bump_version
    uses: ./.github/workflows/push_to_azure.yaml
    secrets:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  tag_version:
    name: "Tag Version"
    needs:
      - push_to_azure
      - bump_version
    if: ${{ success() }}
    runs-on: ubuntu-latest
    steps:
      - name: "[INFO] Checkout PR branch (HEAD)"
        uses: actions/checkout@v3
        with:
          # This ensures we check out the same branch used by the PR
          ref: ${{ github.event.pull_request.head.ref }}

      - name: "[INFO] Create & Push Git Tag"
        run: |
          echo "=== [INFO] Creating tag for version: v${{ needs.bump_version.outputs.new_version }} ==="

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Ensure we have the entire commit history
          git fetch --prune --unshallow || true

          # Create an annotated tag "vX.Y"
          git tag -a "v${{ needs.bump_version.outputs.new_version }}" -m "Tagging version v${{ needs.bump_version.outputs.new_version }}"

          # Push the tag
          git push origin "v${{ needs.bump_version.outputs.new_version }}"

  merge_pr:
    name: "Merge PR"
    needs:
      - tag_version
    if: ${{ success() }}  # Only merge if everything else succeeded
    runs-on: ubuntu-latest
    steps:
      # We don't actually need to checkout the repo just to merge the PR
      # We can merge directly via GitHub Script with the PR number from the event:
      - name: "Merge the PR"
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;
            console.log(`Merging PR #${prNumber}...`);
            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
              merge_method: "merge",  // or 'squash' or 'rebase'
            });

  roll_back_version:
    name: "Roll Back Version if pipeline Fails"
    needs:
      - push_to_azure
      - bump_version
    uses: ./.github/workflows/rollback_version.yaml
    if: ${{ failure() }}
    with:
      old_version: ${{ needs.bump_version.outputs.old_version }}
      head_ref: ${{ github.event.pull_request.head.ref }}
